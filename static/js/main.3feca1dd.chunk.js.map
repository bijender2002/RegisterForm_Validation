{"version":3,"sources":["Hookform/Register.js","App.js","reportWebVitals.js","index.js"],"names":["Register","props","useForm","mode","register","handleSubmit","errors","className","onSubmit","data","console","log","htmlFor","type","classNames","fname","id","ref","required","minLength","value","message","name","email","pattern","Pnumber","psw","gender","state","check","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3feca1dd.chunk.js","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport Rgt from './Rgt.css';\nfunction Register(props) {\n\n    const { register, handleSubmit, errors } = useForm({\n        mode: \"onChange\"\n    })\n\n    const onSubmit = data => {\n        console.log(data);\n        console.log(errors);\n\n    }\n\n    return (\n        <>\n            <div className=\"container my-4 \">\n                <h2 className=\"text-center my-5 text-black\"><u>Register</u></h2>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"fname\">Full Name</label>\n                        <input type=\"text\" className={classNames(\"form-control\", {\n                            \"is-invalid\": errors.fname\n                        })}\n                            id=\"fname\"\n                            ref={register({\n                                required: \"This field is required !\",\n                                minLength: {\n                                    value: 4,\n                                    message: \"minimum 4 characters is required !\",\n                                },\n\n                            })}\n                            name=\"fname\" >\n                        </input>\n\n                        {errors.fname\n                            && (\n                                <div className=\"invalid-feedback\">\n                                    {errors.fname.message}\n                                </div>\n                            )}\n\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" className={classNames(\"form-control\", {\n                            \"is-invalid\": errors.email\n                        })}\n                            id=\"email\"\n                            ref={register({\n                                required: \"This field is required !\",\n                                pattern: {\n                                    value: /^[a-zA-Z0-9.!#$&'*+/=?`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n                                    message: \"Please enter a valid e-mail address\",\n                                },\n                            })}\n                            name=\"email\">\n                        </input>\n\n                        {errors.email\n                            && (\n                                <div className=\"invalid-feedback\">\n                                    {errors.email.message}\n                                </div>\n                            )}\n\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"Pnumber\">Phone Number</label>\n                        <input type=\"number\" className={classNames(\"form-control\", {\n                            \"is-invalid\": errors.Pnumber\n                        })}\n                            id=\"Pnumber\"\n                            ref={register({\n                                required: \"This field is required !\",\n                                pattern: {\n                                    value: /^\\d{10}$/,\n                                    message: \"Please enter a valid 10-digit phone number\",\n                                },\n                            })}\n                            name=\"Pnumber\">\n                        </input>\n\n                        {errors.Pnumber\n                            && (\n                                <div className=\"invalid-feedback\">\n                                    {errors.Pnumber.message}\n                                </div>\n                            )}\n\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"psw\">Password</label>\n                        <input type=\"password\" className={classNames(\"form-control\", {\n                            \"is-invalid\": errors.psw\n                        })}\n                            id=\"psw\"\n                            ref={register({\n                                required: \"This field is required !\",\n                                pattern: {\n                                    value: /(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/,\n                                    message: \"Password must be in (Uppercase,Lowercase,Number/Specialcharacters and min 8 Chars)\",\n                                },\n                            })}\n                            name=\"psw\">\n                        </input>\n\n                        {errors.psw\n                            && (\n                                <div className=\"invalid-feedback\">\n                                    {errors.psw.message}\n                                </div>\n                            )}\n\n                    </div>\n\n                    <div className=\"form-check form-check-inline\">\n                        <input type=\"radio\" className=\"form-check-input\"\n                            id=\"male\"\n                            value=\"male\"\n                            ref={register({\n                                required: \"This field is required !\",\n                            })}\n                            name=\"gender\">\n                        </input>\n\n                        <label className=\"form-check-label\" htmlFor=\"male\">male</label>\n\n                    </div>\n\n                    <div className=\"form-check form-check-inline\">\n                        <input type=\"radio\" className=\"form-check-input\" id=\"female\" value=\"female\" ref={register({\n                            required: \"This field is required !\",\n                        })}\n                            name=\"gender\">\n                        </input>\n                        <label className=\"form-check-label\" htmlFor=\"female\">female</label>\n                    </div>\n\n                    <div className=\"form-check form-check-inline\">\n                        <input type=\"radio\" className=\"form-check-input\" id=\"other\" value=\"other\" ref={register({\n                            required: \"This field is required !\",\n                        })}\n                            name=\"gender\">\n                        </input>\n                        <label className=\"form-check-label\" htmlFor=\"other\">other</label>\n\n                    </div>\n\n                    {errors.gender\n                        && (\n                            <small className=\"form-text text-danger\">\n                                {errors.gender.message}\n                            </small>\n                        )}\n\n                    <div className=\"form-group\">\n                        <select className={classNames(\"custom-select\", {\n                            \"is-invalid\": errors.state\n                        })}\n                            name=\"state\"\n                            ref={register({\n                                required: \"This field is required !\",\n\n                            })}>\n\n                            <option value=\"\">Select your state</option>\n                            <option value=\"Delhi\">Delhi</option>\n                            <option value=\"Punjab\">Punjab</option>\n\n                        </select>\n\n                        {errors.state\n                            && (\n                                <div className=\"invalid-feedback\">\n                                    {errors.state.message}\n                                </div>\n                            )}\n\n                    </div>\n\n                    <div className=\"form-group form-check\">\n                        <input type=\"checkbox\" className=\"form-check-input\"\n                            id=\"check\"\n                            name=\"check\"\n                            ref={register({\n                                required: \"This field is required !\",\n                            })}>\n\n                        </input>\n                        <label className=\"form-check-label\" htmlFor=\"check\">Check me out</label>\n\n                    </div>\n\n                    {errors.check\n                        && (\n                            <small className=\"form-text text-danger\">\n                                {errors.check.message}\n                            </small>\n                        )}\n\n                    <div className=\"btn text-center w-100\">\n                        <button type=\"submit\" className=\"btn btn-primary w-50\">Submit</button>\n                    </div>\n                </form>\n            </div>\n\n        </>\n    )\n}\n\nexport default Register;","import React from 'react';\nimport Register from './Hookform/Register';\n\nfunction App() {\n  return (\n    <div>\n      <Register/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}